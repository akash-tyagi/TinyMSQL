1. Presently we are removing holes while deleting tuples from a relation. This is a costly affair and requires rewriting of all the valid tuples back to Disk after deletion operation completes. Check if there is any performance improvement if we do not handle this issue and let the holes be there.

2. Field in a row can be NULL. Check that in updating vTable

3. INSERT INTO course (sid, homework, project, exam, grade) SELECT * FROM course : Not working

4. For large ralations (no 1 pass or 2 pass), still we can use the max # of blocks fitting in main memory for one of the relations.
   (Notes 14 - slide 66)
   
5. Not making vTable entries for temp relations for now.

6. Implementation of pushinng of "selection condition" in phase1(sorting) of 2 pass algo is TBD

7. We need to delete temp relations once the query is completed (Keep all temp relations in a HashMap) 

8. Two pass algo for single relation

9. Join for A.x = B.y not getting handled -> We are hadling only A.x = B.x

#### NAME CHANGES #### 
make the new temp table name as combined table name 


######## ASSUMPTIONS ######
1. If single table then super tuple will not have the table name 
If multiple tables then super tuple will have table name too with field name
Needed in the execute of the factor where the colName value is fetched

2. If OR condition then complete condition needs to be satisfied as
union operation is needed, so no selection optimization is performed

############# OPTIMZATIONS POSSIBLE AND OTHER IMPORTANT WORK LEFT#############
1. (WORKING) Bulk insert from select statement
2.(DONE)Product operation with results in main memory and do not write in disk
3.Check for other places where we can perform the entire operation in table
4.(DONE)Write results in a file
5.(DONE)Right product operation table order for first operation to fit in memory
6.(DONE)Remove extra tables formed during project
7.Avoid writing 
8. (DONE) HANDLE Case SELECT sid, course.grade FROM course
# (DONE)check for the case of ordering of tables with projection, 
# (DONE) projection before duplicate removal
# (DONE)duplicate removal before projection
# check for other condition when to avoid join 
# Distinct move ahead of join (optional)